#!/usr/bin/env bash

set -euo pipefail

# === Configurable Defaults ===
BASE_BRANCH="master"
DEFAULT_LOG_DIR="${HOME}/qortal-auto-update-logs"
LOG_FILE=""
DRY_RUN=false

# === Helper Functions ===
function abort() {
  echo -e "\nERROR: $1" >&2
  exit 1
}

function confirm_or_exit() {
  echo "$1"
  read -rp "Continue? (y/N): " confirm
  [[ "${confirm}" =~ ^[Yy]$ ]] || exit 1
}

function run_git() {
  echo "Running: git $*"
  $DRY_RUN || git "$@"
}

function increment_version() {
  local version=$1
  local major minor patch
  IFS='.' read -r major minor patch <<< "$version"
  ((patch++))
  echo "$major.$minor.$patch"
}

# === Prompt for Logging Directory ===
echo "Default log directory: ${DEFAULT_LOG_DIR}"
read -rp "Use this log directory? (Y/n): " log_choice
if [[ "${log_choice}" =~ ^[Nn]$ ]]; then
  read -rp "Enter desired log directory path: " CUSTOM_LOG_DIR
  LOG_DIR="${CUSTOM_LOG_DIR}"
else
  LOG_DIR="${DEFAULT_LOG_DIR}"
fi

mkdir -p "${LOG_DIR}" || abort "Unable to create log directory: ${LOG_DIR}"
LOG_FILE="${LOG_DIR}/qortal-mvn-build-$(date +%Y%m%d-%H%M%S).log"
echo "Logging to: ${LOG_FILE}"

# === Dry Run Mode Option ===
read -rp "Enable dry-run mode? (y/N): " dry_choice
if [[ "${dry_choice}" =~ ^[Yy]$ ]]; then
  DRY_RUN=true
  echo "Dry-run mode ENABLED. Commands will be shown but not executed."
else
  echo "Dry-run mode DISABLED. Real commands will be executed."
fi

# === Detect Git Root ===
git_dir=$(git rev-parse --show-toplevel 2>/dev/null || true)
[[ -z "${git_dir}" ]] && abort "Not inside a git repository."
cd "${git_dir}"

# === Confirm Git Origin URL ===
git_origin=$(git config --get remote.origin.url)
echo "Git origin URL: ${git_origin}"
confirm_or_exit "Is this the correct repository?"

# === Verify Current Branch ===
current_branch=$(git rev-parse --abbrev-ref HEAD)
echo "Current git branch: ${current_branch}"
if [[ "${current_branch}" != "${BASE_BRANCH}" ]]; then
  echo "Expected to be on '${BASE_BRANCH}' branch, but found '${current_branch}'"
  confirm_or_exit "Proceed anyway in 5 seconds or abort with CTRL+C."
  sleep 5
fi

# === Check for Uncommitted Changes ===
uncommitted=$(git status --short --untracked-files=no)
if [[ -n "${uncommitted}" ]]; then
  echo "Uncommitted changes detected:"
  echo "${uncommitted}"
  abort "Please commit or stash changes first."
fi

# === Extract Info ===
short_hash=$(git rev-parse --short HEAD)
[[ -z "${short_hash}" ]] && abort "Unable to extract commit hash."
echo "Using commit hash: ${short_hash}"

project=$(grep -oPm1 "(?<=<artifactId>)[^<]+" pom.xml)
[[ -z "${project}" ]] && abort "Unable to determine project name from pom.xml."
echo "Detected project: ${project}"

# === Auto-Increment Version in pom.xml ===
current_version=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml)
new_version=$(increment_version "$current_version")

$DRY_RUN || sed -i "s|<version>${current_version}</version>|<version>${new_version}</version>|" pom.xml

echo "Updated version from ${current_version} to ${new_version} in pom.xml"
git diff pom.xml
confirm_or_exit "Is the updated version correct?"

run_git add pom.xml
run_git commit -m "Bump version to ${new_version}"
run_git tag "v${new_version}"
confirm_or_exit "About to push version tag 'v${new_version}' to origin."
run_git push origin "v${new_version}"

# === Build JAR ===
echo "Building JAR for ${project}..."
if ! $DRY_RUN; then
  mvn clean package &> "${LOG_FILE}" || {
    tail -n 20 "${LOG_FILE}"
    abort "Maven build failed. See full log: ${LOG_FILE}"
  }
fi

jar_file=$(ls target/${project}*.jar | head -n1)
[[ ! -f "${jar_file}" ]] && abort "Built JAR file not found."

# === XOR Obfuscation ===
echo "Creating ${project}.update..."
$DRY_RUN || java -cp "${jar_file}" org.qortal.XorUpdate "${jar_file}" "${project}.update"

# === Create Auto-Update Branch ===
update_branch="auto-update-${short_hash}"

echo "Creating update branch: ${update_branch}"
if git show-ref --verify --quiet refs/heads/${update_branch}; then
  run_git branch -D "${update_branch}"
fi

run_git checkout --orphan "${update_branch}"
$DRY_RUN || git rm -rf . > /dev/null 2>&1 || true

run_git add "${project}.update"
run_git commit -m "XORed auto-update JAR for commit ${short_hash}"

confirm_or_exit "About to push auto-update branch '${update_branch}' to origin."
run_git push --set-upstream origin "${update_branch}"

# === Return to Original Branch ===
echo "Switching back to original branch: ${current_branch}"
run_git checkout --force "${current_branch}"
echo "Done. ${project}.update is committed to ${update_branch}."

